// Generated by CoffeeScript 1.9.0
(function() {
  var KeyStream, Stream, nextTick,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  Stream = require('stream');

  nextTick = require('async').nextTick;

  module.exports = KeyStream = (function(_super) {
    __extends(KeyStream, _super);

    KeyStream.prototype.readable = true;

    KeyStream.prototype.writable = false;

    KeyStream.prototype.paused = false;

    KeyStream.prototype.replenishing = false;

    KeyStream.prototype.allKeysQueued = false;

    KeyStream.prototype.allKeysStreamed = false;

    KeyStream.prototype.marker = null;

    function KeyStream(_arg) {
      this.client = _arg.client, this.prefix = _arg.prefix, this.maxKeysPerRequest = _arg.maxKeysPerRequest;
      this._continueStreaming = __bind(this._continueStreaming, this);
      this.keyQueue = [];
      if (this.maxKeysPerRequest == null) {
        this.maxKeysPerRequest = 500;
      }
      this._replenishKeys(this._continueStreaming);
    }

    KeyStream.prototype.pause = function() {
      return this.paused = true;
    };

    KeyStream.prototype.resume = function() {
      if (!this.paused) {
        return;
      }
      this.paused = false;
      return this._continueStreaming();
    };

    KeyStream.prototype.isExhausted = function() {
      return this.allKeysStreamed;
    };

    KeyStream.prototype._keysRunningLow = function() {
      return this.keyQueue.length <= (this.maxKeysPerRequest / 2);
    };

    KeyStream.prototype._continueStreaming = function() {
      while (this.keyQueue.length > 0) {
        if (this.paused) {
          return;
        }
        if (!this.allKeysQueued && !this.replenishing && this._keysRunningLow()) {
          this._replenishKeys((function(_this) {
            return function() {
              return nextTick(function() {
                return _this._continueStreaming();
              });
            };
          })(this));
        }
        this.emit('data', this.keyQueue.shift());
      }
      if (this.allKeysQueued && !this.allKeysStreamed) {
        this.allKeysStreamed = true;
        return this.emit('end');
      }
    };

    KeyStream.prototype._replenishKeys = function(done) {
      this.replenishing = true;
      return this.client.listPageOfKeys({
        prefix: this.prefix,
        maxKeys: this.maxKeysPerRequest,
        marker: this.marker
      }, (function(_this) {
        return function(err, page) {
          var row, _i, _len, _ref;
          _this.replenishing = false;
          if (err != null) {
            _this.emit('error', err);
            return done();
          }
          _ref = page.Contents;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            row = _ref[_i];
            _this.keyQueue.push(row.Key);
          }
          if (page.IsTruncated) {
            _this.marker = _this.keyQueue.slice(-1)[0];
          } else {
            _this.allKeysQueued = true;
          }
          return done();
        };
      })(this));
    };

    return KeyStream;

  })(Stream);

}).call(this);
